labs(y="CAFI Richness", x= expression(paste("Skeletal Volume (cm"^{3},")"))) +
theme(axis.text = element_text(size = 12.5), axis.title = element_text(size = 15),
axis.title.y = element_blank())
#Plot invert richness to software estimated volume
richness_hull <- ggplot(plot_hull_rich, aes(x=max_hull_volume, y=cafi_richness))+
geom_smooth(method=nls, formula = formula1, se = FALSE, color = "dodgerblue1", fill = "dodgerblue1")+
geom_point(color = "black", pch = 21, fill = "dodgerblue1", size = 3.5, alpha = 0.7)+
geom_ribbon(aes(ymin = lwr, ymax = upr), fill= "dodgerblue1", alpha = 0.2) +
theme_classic()+
scale_y_continuous(limits = c(0,27), breaks = seq(0,25,5)) +
labs(y="CAFI Richness", x= expression(paste("Convex Hull Volume (cm"^{3},")"))) +
theme(axis.text = element_text(size = 12.5), axis.title = element_text(size = 15),
axis.title.y = element_blank())
fig2_raw <- plot_grid(invert_field, invert_hull, invert_pg, richness_field, richness_hull, richness_pg, nrow = 2, ncol = 3, align = "vh", labels = "AUTO")
# ggsave(here("code","figures","man_vs_photo_cafi.pdf"), fig2_raw, device = "pdf", useDingbats = FALSE, width = 9, height = 5)
fig2_raw
ggplot(plot_man_abun, aes(x=volume_field, y=num_cafi))+
geom_smooth(method="nls", formula = formula1, method.args(list(start = c(a = 1, beta = 1))), se = FALSE, color = "#edae52", fill = "#edae52")+
geom_point(color = "black", pch = 21, fill = "#edae52", size = 3.5, alpha = 0.7) +
geom_ribbon(aes(ymin = lwr, ymax = upr), fill= "#edae52", alpha = 0.2) +
theme_classic()+
ylim(c(0,76)) +
labs(y="CAFI Abundance", x= expression(paste("Ellipsoid Volume (cm"^{3},")"))) +
theme(axis.text = element_text(size = 12.5), axis.title = element_text(size = 15),
axis.title.x = element_blank()) +
coord_cartesian()
ggplot(plot_man_abun, aes(x=volume_field, y=num_cafi))+
geom_smooth(method="nls", method.args(formula = formula1, start = c(a = 1, beta = 1)), se = FALSE, color = "#edae52", fill = "#edae52")+
geom_point(color = "black", pch = 21, fill = "#edae52", size = 3.5, alpha = 0.7) +
geom_ribbon(aes(ymin = lwr, ymax = upr), fill= "#edae52", alpha = 0.2) +
theme_classic()+
ylim(c(0,76)) +
labs(y="CAFI Abundance", x= expression(paste("Ellipsoid Volume (cm"^{3},")"))) +
theme(axis.text = element_text(size = 12.5), axis.title = element_text(size = 15),
axis.title.x = element_blank()) +
coord_cartesian()
library(tidyverse)
ggplot(plot_man_abun, aes(x=volume_field, y=num_cafi))+
stat_smooth(method="nls", method.args(formula = formula1, start = c(a = 1, beta = 1)), se = FALSE, color = "#edae52", fill = "#edae52")+
geom_point(color = "black", pch = 21, fill = "#edae52", size = 3.5, alpha = 0.7) +
geom_ribbon(aes(ymin = lwr, ymax = upr), fill= "#edae52", alpha = 0.2) +
theme_classic()+
ylim(c(0,76)) +
labs(y="CAFI Abundance", x= expression(paste("Ellipsoid Volume (cm"^{3},")"))) +
theme(axis.text = element_text(size = 12.5), axis.title = element_text(size = 15),
axis.title.x = element_blank()) +
coord_cartesian()
ggplot(plot_man_abun, aes(x=volume_field, y=num_cafi))+
geom_smooth(method=nls, formula = formula1, start = c(1,1), se = FALSE, color = "#edae52", fill = "#edae52")+
geom_point(color = "black", pch = 21, fill = "#edae52", size = 3.5, alpha = 0.7) +
geom_ribbon(aes(ymin = lwr, ymax = upr), fill= "#edae52", alpha = 0.2) +
theme_classic()+
ylim(c(0,76)) +
labs(y="CAFI Abundance", x= expression(paste("Ellipsoid Volume (cm"^{3},")"))) +
theme(axis.text = element_text(size = 12.5), axis.title = element_text(size = 15),
axis.title.x = element_blank()) +
coord_cartesian()
library(nls2)
ggplot(plot_man_abun, aes(x=volume_field, y=num_cafi)) +
geom_smooth(method=nls, formula = formula1, se = FALSE, color = "#edae52", fill = "#edae52")+
geom_point(color = "black", pch = 21, fill = "#edae52", size = 3.5, alpha = 0.7) +
geom_ribbon(aes(ymin = lwr, ymax = upr), fill= "#edae52", alpha = 0.2) +
theme_classic()+
ylim(c(0,76)) +
labs(y="CAFI Abundance", x= expression(paste("Ellipsoid Volume (cm"^{3},")"))) +
theme(axis.text = element_text(size = 12.5), axis.title = element_text(size = 15),
axis.title.x = element_blank()) +
coord_cartesian()
summary(nls_abun_hull)
ggplot(plot_man_abun, aes(x=volume_field, y=num_cafi)) +
geom_smooth(method= "nls", formula = formula1, se = FALSE, color = "#edae52", fill = "#edae52") +
geom_point(color = "black", pch = 21, fill = "#edae52", size = 3.5, alpha = 0.7) +
geom_ribbon(aes(ymin = lwr, ymax = upr), fill= "#edae52", alpha = 0.2) +
theme_classic()+
ylim(c(0,76)) +
labs(y="CAFI Abundance", x= expression(paste("Ellipsoid Volume (cm"^{3},")"))) +
theme(axis.text = element_text(size = 12.5), axis.title = element_text(size = 15),
axis.title.x = element_blank()) +
coord_cartesian()
rm(list=ls())
# Load data
branch_width <- read.csv(here("morphometric_data","branchwidth_data.csv"))
coral_pg <- read.csv(here("morphometric_data","photogrammetry_data_v3_2020_9_10.csv"))
coral_field <- read.csv(here("morphometric_data","field_experiment_colony_measurements_moorea_summer2019.csv"))
updated_cafi <- read.csv(here("cafi_data","cafi_data_w_taxonomy_summer2019_2020_5_21.csv"))
# Data Preparation and Cleaning
# CAFI data
updated_cafi2 <- updated_cafi %>% filter(str_detect(coral_id, "^FE")) %>%
select(master_sort, coral_id, code, type, search_term, lowest_level, phylum, genus, species, general_notes)
# Calculate CAFI richness, abundance, and diversity (shannon weiner) for each coral
cafi_summarized2 <- group_by(updated_cafi2, coral_id) %>%
summarise(num_cafi = n(), cafi_richness = length(unique(code)), cafi_present = paste(sort(unique(code)), collapse = ";"))
cafi_summarized2$sw <- updated_cafi2 %>%
count(code, coral_id = coral_id) %>%
spread(code,n) %>%
mutate_all(list(~tidyr::replace_na(.,0))) %>%
select(-coral_id) %>%
diversity(index = "shannon")
# Clean field data
coral_field2 <- coral_field %>%
rename(branch = branch_width)
# Clean photogrammetry morphometric data
coral_pg$volume_pg <- as.numeric(as.character(coral_pg$volume_pg)) # Convert factor to numeric
coral_pg <- coral_pg %>% filter(use == "y") %>%   mutate(volume_pg=volume_pg*10^6, #convert m^3 to cm^3
max_hull_volume=max_hull_volume*10^6, #convert m^3 to cm^3
max_hull_surface_area=max_hull_surface_area*10^4,#convert m^2 to cm^2
surface_area=surface_area*10^4, #convert m^2 to cm^2
height_pg=height_pg*100, #convert m to cm
length_pg=length_pg*100, #convert m to cm
width_pg=width_pg*100) #convert m to cm
# Clean photogrammetry branch width data and take averages of branch distance for each coral
branch_width$branch_distance_mm <- as.numeric(as.character(branch_width$branch_distance_mm)) # Convert factor to numeric
branch_w_summarized <- group_by(branch_width, coral_id) %>%
summarise(avg_w_cm = mean(branch_distance_mm)/10, #take average branch distance and convert mm to cm
measurements = n(),
locations = paste(sort(unique(location)), collapse = ";"))
#Create primary data frame for analysis
coral_dim <- merge(coral_pg, branch_w_summarized, by = "coral_id") %>%
merge(coral_field2, by = "coral_id") %>%
rename(max_hull_SA = max_hull_surface_area,
SA = surface_area)
# Swap length to be the bigger linear dimension, width to be the smaller one
coral_dim <- coral_dim %>% mutate(length_pg_temp = if_else(length_pg > width_pg, length_pg, width_pg),
width_pg_temp = if_else(length_pg < width_pg, length_pg, width_pg),
length_field_temp = if_else(length_field > width_field, length_field, width_field),
width_field_temp = if_else(length_field < width_field, length_field, width_field)) %>%
select(-length_pg, -width_pg, -length_field, -width_field) %>%
rename(length_pg = length_pg_temp, width_pg = width_pg_temp,
length_field = length_field_temp, width_field = width_field_temp)
coral_dim$interstitial_space <- coral_dim$max_hull_volume - coral_dim$volume_pg #calculate available space by subtracting software estimated volume from convex hull volume
coral_dim$SAV <- coral_dim$SA / coral_dim$volume_pg #calculate surface area to volume relationship
coral_dim$convexity <- coral_dim$volume_pg / coral_dim$max_hull_volume #calculate proportion occupied, high ratios indicate less free space between branches
coral_dim$packing <- coral_dim$SA / coral_dim$max_hull_SA #how much of an objects surface area is situated internally
coral_dim$sphericity <- ((pi^(1/3))*((6*coral_dim$volume_pg)^(2/3)))/coral_dim$SA #calculate sphericity or how close the object is to a sphere
coral_dim$diff_est <- coral_dim$volume_field-coral_dim$volume_pg #actual overestimation
coral_dim$prop_est <- (coral_dim$volume_field - coral_dim$volume_pg)/coral_dim$volume_pg #proportion overestimated
coral_dim <- coral_dim %>% select(-"use", -position, -photos_not_aligned, -measurements, -locations) %>%
rename(notes_pg = notes.x, notes_field = notes.y)
# Undid filtering of removal corals only.. may need to reintroduce step at some later point
coral_dim$branch_conv <- ifelse(coral_dim$convexity>=0.5, "tight","wide") #classifies wide and tight branching coral based on convexity
# Merge coral and CAFI data
cafi_coral <- left_join(coral_dim, cafi_summarized2, by ="coral_id") %>% filter(cafi == "empty")
# Growth Data
december_manual <- read.csv(here("morphometric_data", "field_experiment_colony_measurements_moorea_december2019_v2.csv"))
december_photo <- read.csv(here("morphometric_data","maatea_experiment_photo_measurements_december_JC_2020_7_8.csv"))
december_manual$coral_id <- as.character(december_manual$coral_id)
december_photo$coral_id <- as.character(december_photo$coral_id)
december_photo <- december_photo %>% filter(coral_id %in% coral_dim$coral_id, volume_pg != "NA")
december_photo$vol_pg_aug <- coral_dim$volume_pg[match(december_photo$coral_id,coral_dim$coral_id)]
december_photo$sa_aug <-  coral_dim$SA[match(december_photo$coral_id,coral_dim$coral_id)]
december_photo$vol_hull_aug <- coral_dim$max_hull_volume[match(december_photo$coral_id,coral_dim$coral_id)]
december_photo <- december_photo %>% mutate(volume_pg = volume_pg*10^6, max_hull_volume = max_hull_volume*10^6)
december_photo <- december_photo %>% mutate(vol_growth_pg = volume_pg - vol_pg_aug,
prop_growth_pg = vol_growth_pg/vol_pg_aug*100,
hull_growth = max_hull_volume - vol_hull_aug,
prop_hull_growth = hull_growth/vol_hull_aug*100)
december_manual <- december_manual %>% filter(coral_id %in% december_photo$coral_id) %>%
mutate(vol_growth_man = volume_est_dec - volume_est) %>% mutate(prop_growth_man = vol_growth_man/volume_est*100)
aug_and_dec <- left_join(december_photo, december_manual, by = "coral_id")
manual_dec_trim <- december_manual %>% select(coral_id, volume = volume_est_dec, volume_aug = volume_est, growth = vol_growth_man, prop_growth = prop_growth_man) %>% mutate(method = "Ellipsoid")
photo_dec_trim <- december_photo %>% select(coral_id, volume = volume_pg, volume_aug = vol_pg_aug, growth = vol_growth_pg, prop_growth = prop_growth_pg) %>% mutate(method = "Skeleton")
photo_hull_trim <- december_photo %>% select(coral_id, volume = max_hull_volume, volume_aug = vol_hull_aug, growth = hull_growth, prop_growth = prop_hull_growth) %>% mutate(method = "Convex Hull")
december_stacked <- rbind(manual_dec_trim,photo_dec_trim, photo_hull_trim) %>% drop_na()
december_summary_stats <- december_stacked %>% group_by(method) %>% summarize(
mean_growth = mean(growth, na.rm = TRUE), mean_prop_growth = mean(prop_growth, na.rm = TRUE),
se_vol = sd(growth, na.rm = TRUE)/sqrt(n()), se_prop = sd(prop_growth, na.rm = TRUE)/sqrt(n()))
december_summary_stats$method <- factor(december_summary_stats$method, levels = c("Ellipsoid", "Convex Hull", "Skeleton"))
december_stacked$method <- factor(december_stacked$method, levels = c("Ellipsoid", "Convex Hull", "Skeleton"))
lm_rich_man <- lm(cafi_richness~volume_field, data = cafi_coral)
nls_rich_man <- nls(cafi_richness ~ a*volume_field^beta, cafi_coral, start = list(a = 1, beta = 1))
aic_rich_man <- AIC(lm_rich_man,nls_rich_man)
# Rich v Skeleton
lm_rich_skel <- lm(cafi_richness~volume_pg, data = cafi_coral)
nls_rich_skel <- nls(cafi_richness ~ a*volume_pg^beta, cafi_coral, start = list(a = 1, beta = 1))
aic_rich_skel <- AIC(lm_rich_skel,nls_rich_skel)
# Rich v Hull
lm_rich_hull <- lm(cafi_richness~max_hull_volume, data = cafi_coral)
nls_rich_hull <- nls(cafi_richness ~ a*max_hull_volume^beta, cafi_coral, start = list(a = 1, beta = 1))
aic_rich_hull <- AIC(lm_rich_hull,nls_rich_hull)
# Abun v Hull
lm_abun_hull <- lm(num_cafi~max_hull_volume, data = cafi_coral)
nls_abun_hull <- nls(num_cafi ~ a*max_hull_volume^beta, cafi_coral, start = list(a = 1, beta = 1))
ggplot(plot_man_abun, aes(x=volume_field, y=num_cafi)) +
geom_smooth(method= "nls", formula = formula1, se = FALSE, color = "#edae52", fill = "#edae52") +
geom_point(color = "black", pch = 21, fill = "#edae52", size = 3.5, alpha = 0.7) +
geom_ribbon(aes(ymin = lwr, ymax = upr), fill= "#edae52", alpha = 0.2) +
theme_classic()+
ylim(c(0,76)) +
labs(y="CAFI Abundance", x= expression(paste("Ellipsoid Volume (cm"^{3},")"))) +
theme(axis.text = element_text(size = 12.5), axis.title = element_text(size = 15),
axis.title.x = element_blank()) +
coord_cartesian()
formula1 <- y~a*x^beta
plot_man_abun <- as.data.frame(predFit(nls_abun_man, interval = "confidence", level = 0.95)) %>% cbind(cafi_coral)
plot_skel_abun <- as.data.frame(predFit(nls_abun_skel, interval = "confidence", level = 0.95)) %>% cbind(cafi_coral)
plot_hull_abun <- as.data.frame(predFit(nls_abun_hull, interval = "confidence", level = 0.95)) %>% cbind(cafi_coral)
plot_man_rich <- as.data.frame(predFit(nls_rich_man, interval = "confidence", level = 0.95)) %>% cbind(cafi_coral)
plot_skel_rich <- as.data.frame(predFit(nls_rich_skel, interval = "confidence", level = 0.95)) %>% cbind(cafi_coral)
plot_hull_rich <- as.data.frame(predFit(nls_rich_hull, interval = "confidence", level = 0.95)) %>% cbind(cafi_coral)
plot_skel_abun <- as.data.frame(predFit(nls_abun_skel, interval = "confidence", level = 0.95)) %>% cbind(cafi_coral)
lm_abun_skel <- lm(num_cafi~volume_pg, data = cafi_coral)
nls_abun_skel <- nls(num_cafi ~ a*volume_pg^beta, cafi_coral, start = list(a = 1, beta = 1))
plot_skel_abun <- as.data.frame(predFit(nls_abun_skel, interval = "confidence", level = 0.95)) %>% cbind(cafi_coral)
ggplot(plot_man_abun, aes(x=volume_field, y=num_cafi)) +
geom_smooth(method= "nls", formula = formula1, se = FALSE, color = "#edae52", fill = "#edae52") +
geom_point(color = "black", pch = 21, fill = "#edae52", size = 3.5, alpha = 0.7) +
geom_ribbon(aes(ymin = lwr, ymax = upr), fill= "#edae52", alpha = 0.2) +
theme_classic()+
ylim(c(0,76)) +
labs(y="CAFI Abundance", x= expression(paste("Ellipsoid Volume (cm"^{3},")"))) +
theme(axis.text = element_text(size = 12.5), axis.title = element_text(size = 15),
axis.title.x = element_blank()) +
coord_cartesian()
plot_man_abun <- as.data.frame(predFit(nls_abun_man, interval = "confidence", level = 0.95)) %>% cbind(cafi_coral)
lm_abun_man <- lm(num_cafi~volume_field, data = cafi_coral)
nls_abun_man <- nls(num_cafi ~ a*volume_field^beta, cafi_coral, start = list(a = 1.35, beta = 0.32))
plot_man_abun <- as.data.frame(predFit(nls_abun_man, interval = "confidence", level = 0.95)) %>% cbind(cafi_coral)
ggplot(plot_man_abun, aes(x=volume_field, y=num_cafi)) +
geom_smooth(method= "nls", formula = formula1, se = FALSE, color = "#edae52", fill = "#edae52") +
geom_point(color = "black", pch = 21, fill = "#edae52", size = 3.5, alpha = 0.7) +
geom_ribbon(aes(ymin = lwr, ymax = upr), fill= "#edae52", alpha = 0.2) +
theme_classic()+
ylim(c(0,76)) +
labs(y="CAFI Abundance", x= expression(paste("Ellipsoid Volume (cm"^{3},")"))) +
theme(axis.text = element_text(size = 12.5), axis.title = element_text(size = 15),
axis.title.x = element_blank()) +
coord_cartesian()
library(nls2)
ggplot(plot_man_abun, aes(x=volume_field, y=num_cafi)) +
geom_smooth(method= "nls", formula = formula1, se = FALSE, color = "#edae52", fill = "#edae52") +
geom_point(color = "black", pch = 21, fill = "#edae52", size = 3.5, alpha = 0.7) +
geom_ribbon(aes(ymin = lwr, ymax = upr), fill= "#edae52", alpha = 0.2) +
theme_classic()+
ylim(c(0,76)) +
labs(y="CAFI Abundance", x= expression(paste("Ellipsoid Volume (cm"^{3},")"))) +
theme(axis.text = element_text(size = 12.5), axis.title = element_text(size = 15),
axis.title.x = element_blank()) +
coord_cartesian()
library(propagate)
ggplot(plot_man_abun, aes(x=volume_field, y=num_cafi)) +
geom_smooth(method= "nls", formula = formula1, se = FALSE, color = "#edae52", fill = "#edae52") +
geom_point(color = "black", pch = 21, fill = "#edae52", size = 3.5, alpha = 0.7) +
geom_ribbon(aes(ymin = lwr, ymax = upr), fill= "#edae52", alpha = 0.2) +
theme_classic()+
ylim(c(0,76)) +
labs(y="CAFI Abundance", x= expression(paste("Ellipsoid Volume (cm"^{3},")"))) +
theme(axis.text = element_text(size = 12.5), axis.title = element_text(size = 15),
axis.title.x = element_blank()) +
coord_cartesian()
?predFit
ggplot(plot_man_abun, aes(x=volume_field, y=num_cafi)) +
geom_smooth(method = "nls", formula = formula1, method.args = list(start = list(c(a = 1, beta = 1))), se = FALSE, color = "#edae52", fill = "#edae52") +
geom_point(color = "black", pch = 21, fill = "#edae52", size = 3.5, alpha = 0.7) +
geom_ribbon(aes(ymin = lwr, ymax = upr), fill= "#edae52", alpha = 0.2) +
theme_classic()+
ylim(c(0,76)) +
labs(y="CAFI Abundance", x= expression(paste("Ellipsoid Volume (cm"^{3},")"))) +
theme(axis.text = element_text(size = 12.5), axis.title = element_text(size = 15),
axis.title.x = element_blank()) +
coord_cartesian()
ggplot(plot_man_abun, aes(x=volume_field, y=num_cafi)) +
geom_smooth(method = "nls", formula = formula1, method.args = list(start = list(a = 1, beta = 1)), se = FALSE, color = "#edae52", fill = "#edae52") +
geom_point(color = "black", pch = 21, fill = "#edae52", size = 3.5, alpha = 0.7) +
geom_ribbon(aes(ymin = lwr, ymax = upr), fill= "#edae52", alpha = 0.2) +
theme_classic()+
ylim(c(0,76)) +
labs(y="CAFI Abundance", x= expression(paste("Ellipsoid Volume (cm"^{3},")"))) +
theme(axis.text = element_text(size = 12.5), axis.title = element_text(size = 15),
axis.title.x = element_blank()) +
coord_cartesian()
lm_abun_man <- lm(num_cafi~volume_field, data = cafi_coral)
nls_abun_man <- nls(num_cafi ~ a*volume_field^beta, cafi_coral, start = list(a = 1.35, beta = 0.32))
# Abun v Skeleton
lm_abun_skel <- lm(num_cafi~volume_pg, data = cafi_coral)
nls_abun_skel <- nls(num_cafi ~ a*volume_pg^beta, cafi_coral, start = list(a = 1, beta = 1))
# Rich v Ellipsoid
lm_rich_man <- lm(cafi_richness~volume_field, data = cafi_coral)
nls_rich_man <- nls(cafi_richness ~ a*volume_field^beta, cafi_coral, start = list(a = 1, beta = 1))
# Rich v Skeleton
lm_rich_skel <- lm(cafi_richness~volume_pg, data = cafi_coral)
nls_rich_skel <- nls(cafi_richness ~ a*volume_pg^beta, cafi_coral, start = list(a = 1, beta = 1))
# Rich v Hull
lm_rich_hull <- lm(cafi_richness~max_hull_volume, data = cafi_coral)
nls_rich_hull <- nls(cafi_richness ~ a*max_hull_volume^beta, cafi_coral, start = list(a = 1, beta = 1))
# Abun v Hull
lm_abun_hull <- lm(num_cafi~max_hull_volume, data = cafi_coral)
nls_abun_hull <- nls(num_cafi ~ a*max_hull_volume^beta, cafi_coral, start = list(a = 1, beta = 1))
formula1 <- y~a*x^beta
plot_man_abun <- as.data.frame(predFit(nls_abun_man, interval = "confidence", level = 0.95)) %>% cbind(cafi_coral)
plot_skel_abun <- as.data.frame(predFit(nls_abun_skel, interval = "confidence", level = 0.95)) %>% cbind(cafi_coral)
plot_hull_abun <- as.data.frame(predFit(nls_abun_hull, interval = "confidence", level = 0.95)) %>% cbind(cafi_coral)
plot_man_rich <- as.data.frame(predFit(nls_rich_man, interval = "confidence", level = 0.95)) %>% cbind(cafi_coral)
plot_skel_rich <- as.data.frame(predFit(nls_rich_skel, interval = "confidence", level = 0.95)) %>% cbind(cafi_coral)
plot_hull_rich <- as.data.frame(predFit(nls_rich_hull, interval = "confidence", level = 0.95)) %>% cbind(cafi_coral)
# cafi_coral <- cafi_coral %>% filter(coral_id != "FE-POC01") # Can be used to take out "outlier" from CAFI plots
#Plot invert abundance to  volume
invert_field <- ggplot(plot_man_abun, aes(x=volume_field, y=num_cafi)) +
geom_smooth(method = "nls", formula = formula1, method.args = list(start = list(a = 1, beta = 1)), se = FALSE, color = "#edae52", fill = "#edae52") +
geom_point(color = "black", pch = 21, fill = "#edae52", size = 3.5, alpha = 0.7) +
geom_ribbon(aes(ymin = lwr, ymax = upr), fill= "#edae52", alpha = 0.2) +
theme_classic()+
ylim(c(0,76)) +
labs(y="CAFI Abundance", x= expression(paste("Ellipsoid Volume (cm"^{3},")"))) +
theme(axis.text = element_text(size = 12.5), axis.title = element_text(size = 15),
axis.title.x = element_blank()) +
coord_cartesian()
#Plot invert abundance to software estimated volume
invert_pg <- ggplot(plot_skel_abun, aes(x=volume_pg, y=num_cafi))+
geom_smooth(method=nls, formula = formula1, se = FALSE, method.args = list(start = list(a = 1, beta = 1)), color = "#5fb2b2", fill = "#5fb2b2")+
geom_point(color = "black", pch = 21, fill = "#5fb2b2", size = 3.5, alpha = 0.7)+
theme_classic()+
geom_ribbon(aes(ymin = lwr, ymax = upr), fill= "#5fb2b2", alpha = 0.2) +
ylim(c(0,76)) +
labs(y="CAFI Abundance", x= expression(paste("Skeletal Volume (cm"^{3},")"))) +
theme(axis.text = element_text(size = 12.5), axis.title = element_blank()) +
coord_cartesian()
#Plot invert abundance to hull volume
invert_hull <- ggplot(plot_hull_abun, aes(x=max_hull_volume, y=num_cafi))+
geom_smooth(method=nls, formula = formula1, method.args = list(start = list(a = 1, beta = 1)), se = FALSE, color = "dodgerblue1", fill = "dodgerblue1")+
geom_point(color = "black", pch = 21, fill = "dodgerblue1", size = 3.5, alpha = 0.7)+
geom_ribbon(aes(ymin = lwr, ymax = upr), fill= "dodgerblue1", alpha = 0.2) +
theme_classic()+
ylim(c(0,76)) +
labs(y="CAFI Abundance", x= expression(paste("Convex Hull Volume (cm"^{3},")"))) +
theme(axis.text = element_text(size = 12.5), axis.title = element_blank())
#Plot invert richness to manual volume
richness_field <- ggplot(plot_man_rich, aes(x=volume_field, y=cafi_richness))+
geom_smooth(method=nls, formula = formula1, method.args = list(start = list(a = 1, beta = 1)), se = FALSE, color = "#edae52", fill = "#edae52")+
geom_point(color = "black", pch = 21, fill = "#edae52", size = 3.5, alpha = 0.7)+
geom_ribbon(aes(ymin = lwr, ymax = upr), fill= "#edae52", alpha = 0.2) +
theme_classic()+
scale_y_continuous(limits = c(0,27), breaks = seq(0,25,5)) +
theme(axis.text = element_text(size = 12.5), axis.title = element_text(size = 15))
#Plot invert richness to software estimated volume
richness_pg <- ggplot(plot_skel_rich, aes(x=volume_pg, y=cafi_richness))+
geom_smooth(method=nls, formula = formula1, method.args = list(start = list(a = 1, beta = 1)), se = FALSE, color = "#5fb2b2", fill = "#5fb2b2")+
geom_point(color = "black", pch = 21, fill = "#5fb2b2", size = 3.5, alpha = 0.7)+
geom_ribbon(aes(ymin = lwr, ymax = upr), fill= "#5fb2b2", alpha = 0.2) +
theme_classic()+
scale_y_continuous(limits = c(0,27), breaks = seq(0,25,5)) +
labs(y="CAFI Richness", x= expression(paste("Skeletal Volume (cm"^{3},")"))) +
theme(axis.text = element_text(size = 12.5), axis.title = element_text(size = 15),
axis.title.y = element_blank())
#Plot invert richness to software estimated volume
richness_hull <- ggplot(plot_hull_rich, aes(x=max_hull_volume, y=cafi_richness))+
geom_smooth(method=nls, formula = formula1, method.args = list(start = list(a = 1, beta = 1)), se = FALSE, color = "dodgerblue1", fill = "dodgerblue1")+
geom_point(color = "black", pch = 21, fill = "dodgerblue1", size = 3.5, alpha = 0.7)+
geom_ribbon(aes(ymin = lwr, ymax = upr), fill= "dodgerblue1", alpha = 0.2) +
theme_classic()+
scale_y_continuous(limits = c(0,27), breaks = seq(0,25,5)) +
labs(y="CAFI Richness", x= expression(paste("Convex Hull Volume (cm"^{3},")"))) +
theme(axis.text = element_text(size = 12.5), axis.title = element_text(size = 15),
axis.title.y = element_blank())
fig2_raw <- plot_grid(invert_field, invert_hull, invert_pg, richness_field, richness_hull, richness_pg, nrow = 2, ncol = 3, align = "vh", labels = "AUTO")
# ggsave(here("code","figures","man_vs_photo_cafi.pdf"), fig2_raw, device = "pdf", useDingbats = FALSE, width = 9, height = 5)
fig2_raw
lm_abun_man <- lm(num_cafi~volume_field, data = cafi_coral)
nls_abun_man <- nls(num_cafi ~ a*volume_field^beta, cafi_coral, start = list(a = 1.35, beta = 0.32))
# Abun v Skeleton
lm_abun_skel <- lm(num_cafi~volume_pg, data = cafi_coral)
nls_abun_skel <- nls(num_cafi ~ a*volume_pg^beta, cafi_coral, start = list(a = 1, beta = 1))
# Rich v Ellipsoid
lm_rich_man <- lm(cafi_richness~volume_field, data = cafi_coral)
nls_rich_man <- nls(cafi_richness ~ a*volume_field^beta, cafi_coral, start = list(a = 1, beta = 1))
# Rich v Skeleton
lm_rich_skel <- lm(cafi_richness~volume_pg, data = cafi_coral)
nls_rich_skel <- nls(cafi_richness ~ a*volume_pg^beta, cafi_coral, start = list(a = 1, beta = 1))
# Rich v Hull
lm_rich_hull <- lm(cafi_richness~max_hull_volume, data = cafi_coral)
nls_rich_hull <- nls(cafi_richness ~ a*max_hull_volume^beta, cafi_coral, start = list(a = 1, beta = 1))
# Abun v Hull
lm_abun_hull <- lm(num_cafi~max_hull_volume, data = cafi_coral)
nls_abun_hull <- nls(num_cafi ~ a*max_hull_volume^beta, cafi_coral, start = list(a = 1, beta = 1))
formula1 <- y~a*x^beta
plot_man_abun <- as.data.frame(predFit(nls_abun_man, interval = "confidence", level = 0.95)) %>% cbind(cafi_coral)
plot_skel_abun <- as.data.frame(predFit(nls_abun_skel, interval = "confidence", level = 0.95)) %>% cbind(cafi_coral)
plot_hull_abun <- as.data.frame(predFit(nls_abun_hull, interval = "confidence", level = 0.95)) %>% cbind(cafi_coral)
plot_man_rich <- as.data.frame(predFit(nls_rich_man, interval = "confidence", level = 0.95)) %>% cbind(cafi_coral)
plot_skel_rich <- as.data.frame(predFit(nls_rich_skel, interval = "confidence", level = 0.95)) %>% cbind(cafi_coral)
plot_hull_rich <- as.data.frame(predFit(nls_rich_hull, interval = "confidence", level = 0.95)) %>% cbind(cafi_coral)
# cafi_coral <- cafi_coral %>% filter(coral_id != "FE-POC01") # Can be used to take out "outlier" from CAFI plots
#Plot invert abundance to  volume
invert_field <- ggplot(plot_man_abun, aes(x=volume_field, y=num_cafi)) +
geom_smooth(method = "nls", formula = formula1, method.args = list(start = list(a = 1, beta = 1)), se = FALSE, color = "#edae52", fill = "#edae52") +
geom_point(color = "black", pch = 21, fill = "#edae52", size = 3.5, alpha = 0.7) +
geom_ribbon(aes(ymin = lwr, ymax = upr), fill= "#edae52", alpha = 0.2) +
theme_classic()+
ylim(c(0,76)) +
labs(y="CAFI Abundance", x= expression(paste("Ellipsoid Volume (cm"^{3},")"))) +
theme(axis.text = element_text(size = 12.5), axis.title = element_text(size = 15),
axis.title.x = element_blank()) +
coord_cartesian()
#Plot invert abundance to software estimated volume
invert_pg <- ggplot(plot_skel_abun, aes(x=volume_pg, y=num_cafi))+
geom_smooth(method=nls, formula = formula1, se = FALSE, method.args = list(start = list(a = 1, beta = 1)), color = "#5fb2b2", fill = "#5fb2b2")+
geom_point(color = "black", pch = 21, fill = "#5fb2b2", size = 3.5, alpha = 0.7)+
theme_classic()+
geom_ribbon(aes(ymin = lwr, ymax = upr), fill= "#5fb2b2", alpha = 0.2) +
ylim(c(0,76)) +
labs(y="CAFI Abundance", x= expression(paste("Skeletal Volume (cm"^{3},")"))) +
theme(axis.text = element_text(size = 12.5), axis.title = element_blank()) +
coord_cartesian()
#Plot invert abundance to hull volume
invert_hull <- ggplot(plot_hull_abun, aes(x=max_hull_volume, y=num_cafi))+
geom_smooth(method=nls, formula = formula1, method.args = list(start = list(a = 1, beta = 1)), se = FALSE, color = "dodgerblue1", fill = "dodgerblue1")+
geom_point(color = "black", pch = 21, fill = "dodgerblue1", size = 3.5, alpha = 0.7)+
geom_ribbon(aes(ymin = lwr, ymax = upr), fill= "dodgerblue1", alpha = 0.2) +
theme_classic()+
ylim(c(0,76)) +
labs(y="CAFI Abundance", x= expression(paste("Convex Hull Volume (cm"^{3},")"))) +
theme(axis.text = element_text(size = 12.5), axis.title = element_blank())
#Plot invert richness to manual volume
richness_field <- ggplot(plot_man_rich, aes(x=volume_field, y=cafi_richness))+
geom_smooth(method=nls, formula = formula1, method.args = list(start = list(a = 1, beta = 1)), se = FALSE, color = "#edae52", fill = "#edae52")+
geom_point(color = "black", pch = 21, fill = "#edae52", size = 3.5, alpha = 0.7)+
geom_ribbon(aes(ymin = lwr, ymax = upr), fill= "#edae52", alpha = 0.2) +
theme_classic()+
labs(y="CAFI Richness", x= expression(paste("Ellipsoid Volume (cm"^{3},")"))) +
scale_y_continuous(limits = c(0,27), breaks = seq(0,25,5)) +
theme(axis.text = element_text(size = 12.5), axis.title = element_text(size = 15))
#Plot invert richness to software estimated volume
richness_pg <- ggplot(plot_skel_rich, aes(x=volume_pg, y=cafi_richness))+
geom_smooth(method=nls, formula = formula1, method.args = list(start = list(a = 1, beta = 1)), se = FALSE, color = "#5fb2b2", fill = "#5fb2b2")+
geom_point(color = "black", pch = 21, fill = "#5fb2b2", size = 3.5, alpha = 0.7)+
geom_ribbon(aes(ymin = lwr, ymax = upr), fill= "#5fb2b2", alpha = 0.2) +
theme_classic()+
scale_y_continuous(limits = c(0,27), breaks = seq(0,25,5)) +
labs(y="CAFI Richness", x= expression(paste("Skeletal Volume (cm"^{3},")"))) +
theme(axis.text = element_text(size = 12.5), axis.title = element_text(size = 15),
axis.title.y = element_blank())
#Plot invert richness to software estimated volume
richness_hull <- ggplot(plot_hull_rich, aes(x=max_hull_volume, y=cafi_richness))+
geom_smooth(method=nls, formula = formula1, method.args = list(start = list(a = 1, beta = 1)), se = FALSE, color = "dodgerblue1", fill = "dodgerblue1")+
geom_point(color = "black", pch = 21, fill = "dodgerblue1", size = 3.5, alpha = 0.7)+
geom_ribbon(aes(ymin = lwr, ymax = upr), fill= "dodgerblue1", alpha = 0.2) +
theme_classic()+
scale_y_continuous(limits = c(0,27), breaks = seq(0,25,5)) +
labs(y="CAFI Richness", x= expression(paste("Convex Hull Volume (cm"^{3},")"))) +
theme(axis.text = element_text(size = 12.5), axis.title = element_text(size = 15),
axis.title.y = element_blank())
fig2_raw <- plot_grid(invert_field, invert_hull, invert_pg, richness_field, richness_hull, richness_pg, nrow = 2, ncol = 3, align = "vh", labels = "AUTO")
# ggsave(here("code","figures","man_vs_photo_cafi.pdf"), fig2_raw, device = "pdf", useDingbats = FALSE, width = 9, height = 5)
fig2_raw
ggsave(here("code","figures","man_vs_photo_cafi_v2.pdf"), fig2_raw, device = "pdf", useDingbats = FALSE, width = 9, height = 5)
fig2_raw <- plot_grid(invert_field, invert_hull, invert_pg, richness_field, richness_hull, richness_pg, nrow = 2, ncol = 3, align = "vh", labels = "AUTO")
ggsave(here("code","figures","man_vs_photo_cafi_v2.pdf"), fig2_raw, device = "pdf", useDingbats = FALSE, width = 9, height = 5)
aic_abun_man <- AIC(lm_abun_man,nls_abun_man)
View(aic_abun_man)
aic_abun_skel <- AIC(lm_abun_skel,nls_abun_skel)
View(aic_abun_skel)
aic_rich_man <- AIC(lm_rich_man,nls_rich_man)
View(aic_rich_man)
aic_rich_skel <- AIC(lm_rich_skel,nls_rich_skel)
View(aic_rich_skel)
aic_rich_hull <- AIC(lm_rich_hull,nls_rich_hull)
View(aic_rich_hull)
aic_abun_hull <- AIC(lm_abun_hull,nls_abun_hull)
View(aic_abun_hull)
install.packages("lubridate", type = "binary", dependencies=TRUE)
install.packages("readxl", type = "binary", dependencies=TRUE)
install.packages("readxl", type = "binary", dependencies = TRUE)
install.packages("purrr", type = "binary", dependencies=TRUE)
install.packages("purrr", type = "binary", dependencies = TRUE)
install.packages("purrr", type = "binary", dependencies = TRUE)
install.packages("purrr", type = "binary", dependencies = TRUE)
install.packages("stringr", type = "binary", dependencies=TRUE)
install.packages("maps", type = "binary", dependencies=TRUE)
install.packages("mapdata", type = "binary", dependencies=TRUE)
install.packages("rmarkdown", type = "binary", dependencies=TRUE)
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
library(knitr)
library(dplyr)
library(tidyr)
library(lubridate)
library(readxl) #1.3.1 or more recent for the .xls file
library(stringr)
library(maps)
library(ggplot2)
ship_data <- read_excel("seabirds.xls", sheet = "Ship data by record ID")
ship_data <- read_excel("seabirds.xls", sheet = "Ship data by record ID")
library(knitr)
library(dplyr)
library(tidyr)
library(lubridate)
library(readxl) #1.3.1 or more recent for the .xls file
library(stringr)
library(maps)
library(ggplot2)
ship_data <- read_excel("seabirds.xls", sheet = "Ship data by record ID")
bird_data <- read_excel("seabirds.xls", sheet = "Bird data by record ID", guess_max=49019)
ship_info <- read_excel("seabirds.xls", sheet = "Ship data codes")
bird_info <- read_excel("seabirds.xls", sheet = "Bird data codes")
#summary() accepts a block of data so summary(bird_data) can be rewritten as
bird_data %>%
summary()
bird_data %>% # you can add comments on the rest of the line the %>% is one
glimpse() %>%
# you can also add comments between piped steps
nrow()
ship_data %>%
glimpse()
bird_data %>%
inner_join(ship_data, by=c("RECORD ID" = "RECORD ID")) %>%
dim()
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
remove.packages("rlang", lib="~/R/win-library/3.6")
install.packages("rlang")
install.packages(c("ape", "backports", "bayestestR", "BH", "blob", "bold", "brio", "bslib", "cachem", "car", "carData", "colorspace", "colourpicker", "conflicted", "conquer", "corrplot", "cowplot", "crosstalk", "crul", "curl", "data.table", "DBI", "DEoptimR", "desc", "diffobj", "digest", "dplyr", "e1071", "effectsize", "ellipsis", "emmeans", "fansi", "farver", "fastmap", "fastmatch", "ff", "foreach", "Formula", "fs", "generics", "ggeffects", "ggplot2", "ggpmisc", "ggrepel", "ggsignif", "glue", "gstat", "haven", "here", "hexbin", "highr", "hms", "htmltools", "htmlwidgets", "httpuv", "igraph", "insight", "isoband", "iterators", "kableExtra", "knitr", "labeling", "later", "lavaan", "lifecycle", "lme4", "lmtest", "lubridate", "magick", "manipulateWidget", "mapproj", "maps", "maptools", "MASS", "MatrixModels", "matrixStats", "memoise", "mime", "mvtnorm", "nlme", "nloptr", "openssl", "openxlsx", "packrat", "parameters", "pbkrtest", "performance", "permute", "pillar", "pkgbuild", "pkgload", "plotly", "proj4", "promises", "ps", "psych", "quantreg", "R6", "Rcpp", "RcppArmadillo", "RcppEigen", "readr", "rentrez", "rex", "rgl", "rio", "ritis", "robustbase", "rotl", "rprojroot", "rredlist", "rsconnect", "rstatix", "Rttf2pt1", "rvest", "saemix", "sandwich", "sf", "shiny", "shinyjs", "sjlabelled", "sjmisc", "sjPlot", "sjstats", "solrium", "sp", "spacetime", "SparseM", "splus2R", "statmod", "stringi", "taxize", "testthat", "tibble", "tidyr", "tidyselect", "tinytex", "tufte", "units", "utf8", "uuid", "vctrs", "vegan", "viridisLite", "waldo", "WikidataR", "withr", "xfun", "xml2", "yaml", "zip", "zoo"))
