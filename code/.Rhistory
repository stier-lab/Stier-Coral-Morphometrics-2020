leveneTest(cafi_coral$num_cafi, cafi_coral$branch)
#Q-Q plot separated by group
with(cafi_coral, qqPlot(log_num_cafi[branch == "wide"], dist="norm"))
with(cafi_coral, qqPlot(log_num_cafi[branch == "tight"], dist="norm"))
#Shapiro Wilk seperated by group
with(cafi_coral, shapiro.test(log_num_cafi[branch == "wide"]))
with(cafi_coral, shapiro.test(log_num_cafi[branch == "tight"]))
#Levene's test: response variable, group variable
leveneTest(cafi_coral$log_num_cafi, cafi_coral$branch)
# subset data
tight <- subset(cafi_coral, branch == "tight")
wide <- subset(cafi_coral, branch == "wide")
t.test(tight$log_num_cafi, wide$log_num_cafi, var.equal = TRUE)
#Create graphs of log transformed invertebrate abundance
log_cafi_vol <- ggplot(cafi_coral, aes(x=log_volume_pg, y=log_num_cafi))+
geom_point()+
geom_smooth(method = lm, se=TRUE)+
theme_classic()+
#facet_wrap(~branch)+
labs(y="log invert. abundance", x= expression(paste("log vol. cm"^{3})), title = "Log 3D model vol. and inverts")
log_cafi_rich <- ggplot(cafi_coral, aes(x=log_volume_pg, y=log_cafi_richness))+
geom_point()+
geom_smooth(method = lm, se=TRUE)+
theme_classic()+
#facet_wrap(~branch)+
labs(y="sp. richness", x= expression(paste("log vol. cm"^{3})), title = "Log 3D model vol. and sp. richness")
fig1 <- ggarrange(log_cafi_vol, log_cafi_rich,
ncol = 2, nrow = 1) #combines all graphs
fig1
#Residuals for log transformed data
log_lm_volume <- lm(log_num_cafi~log_volume_pg, data=cafi_coral)
par(mfrow=c(2,2))
plot(log_lm_volume)
par(mfrow=c(1,1))
log_lm_rich <- lm(cafi_richness~log_volume_pg, data=cafi_coral)
par(mfrow=c(2,2))
plot(log_lm_rich)
par(mfrow=c(1,1))
#HTML table from regression results
pl <- c(
'(Intercept)' = "Intercept",
log_volume_pg = "Log volume"
)
tab_model(log_lm_volume, log_lm_rich,
pred.labels = pl,
dv.labels = c("Log invertebrate abundance", "Species richness"))
#Create graphs of log transformed invertebrate abundance
log_cafi_space <- ggplot(cafi_coral, aes(x=log_interstitial_space, y=log_num_cafi))+
geom_point()+
geom_smooth(method = lm, se=TRUE)+
theme_classic()+
#facet_wrap(~branch)+
labs(y="Log invert. abundance", x= expression(paste("Log interstitial space cm"^{3})), title = "Log 3D available space and inverts")
log_space_rich <- ggplot(cafi_coral, aes(x=log_interstitial_space, y=log_cafi_richness))+
geom_point()+
geom_smooth(method = lm, se=TRUE)+
theme_classic()+
#facet_wrap(~branch)+
labs(y="Log sp. richness", x= expression(paste("Log interstitial space cm"^{3})), title = "Log available space and sp. richness")
fig2 <- ggarrange(log_cafi_space, log_space_rich,
ncol = 2, nrow = 1) #combines all graphs
fig2
#Residuals for log transformed data
log_lm_space <- lm(log_num_cafi~log_interstitial_space, data=cafi_coral)
par(mfrow=c(2,2))
plot(log_lm_space)
par(mfrow=c(1,1))
log_lm_rich <- lm(log_cafi_richness~log_interstitial_space, data=cafi_coral)
par(mfrow=c(2,2))
plot(log_lm_rich)
par(mfrow=c(1,1))
#HTML table from regression results
pl <- c(
'(Intercept)' = "Intercept",
log_interstitial_space = "Log interstitial space"
)
tab_model(log_lm_space, log_lm_rich,
pred.labels = pl,
dv.labels = c("Log invertebrate abundance", "Log species richness"))
#Visualize correlations between variables
cafi_coral2 <- cafi_coral %>%
dplyr::select(num_cafi, volume_pg, surface_area, interstitial_space, cafi_richness)
pairs.panels(cafi_coral2, lm = TRUE, cor = T)
log_cafi_coral <- cafi_coral %>%
dplyr::select(log_num_cafi, log_volume_pg, log_surface_area, log_interstitial_space, log_cafi_richness)
pairs.panels(log_cafi_coral, lm = TRUE, cor = T)
sqrt_cafi_coral <- cafi_coral %>%
dplyr::select(sqrt_num_cafi, sqrt_volume_pg, sqrt_surface_area, sqrt_interstitial_space, sqrt_cafi_richness)
pairs.panels(sqrt_cafi_coral, lm = TRUE, cor = T)
sqrt_lm <- lm(sqrt_num_cafi~., data=sqrt_cafi_coral)
vif(sqrt_lm)
lm2 <- lm(log_num_cafi~sqrt_volume_pg + log_interstitial_space, data=cafi_coral)
lm3 <- lm(log_num_cafi~sqrt_volume_pg, data=cafi_coral)
lm4 <- lm(log_num_cafi~log_interstitial_space, data=cafi_coral)
vif(lm2)
res2=lm2$residuals
#Test normality assumption on residuals
par(mfrow=c(2,2))
plot(lm2)
par(mfrow=c(1,1))
hist(res2)
shapiro.test(res2)
#Data is FINALY! normal
fullmodel <- lm(log_num_cafi~sqrt_volume_pg + log_interstitial_space, data=cafi_coral)
nullmodel <- lm(log_num_cafi~1, data=cafi_coral)
stepAIC(fullmodel, scope = c(upper = fullmodel, lower = nullmodel), direction = "both")
#calculate AIC of each model
result <- AIC(lm4,lm3,lm2) #create dataframe
#add other metrics to table
models <- list(lm4,lm3,lm2) #make sure you keep your models in the same order here as they were when you created your results table
result$BIC <- sapply(models, BIC) #add a column for BIC to the results
model_summary <- lapply(models, summary) #look up ?lapply if you have not used this function before
#now we will use a for loop to easily extract the R^2 and adj R^2 value for each model from its summary, and store them in new columns in the results table
for(i in 1:length(models)){ #this creates a variable i that starts with the value i=1
result$rsq[i] <- model_summary[[i]]$r.squared #we assign the rsq value from model i to the i'th row of the column 'rsq' in the table 'results'
result$adj_rsq[i] <- model_summary[[i]]$adj.r.squared #same for adjusted rsq
} #now we go back to the beginning of the for-loop, add 1 to the value of i, and do everything again
kable(result, digits = 2, align = "c")
final_res=lm4$residuals
#Test normality assumption on residuals
par(mfrow=c(2,2))
plot(lm4)
par(mfrow=c(1,1))
hist(final_res)
shapiro.test(final_res)
#Data is FINALY! normal
log_invert_box
fig1
#HTML table from regression results
pl <- c(
'(Intercept)' = "Intercept",
log_volume_pg = "Log volume"
)
tab_model(log_lm_volume, log_lm_rich,
pred.labels = pl,
dv.labels = c("Log invertebrate abundance", "Species richness"))
fig2
#HTML table from regression results
pl <- c(
'(Intercept)' = "Intercept",
log_interstitial_space = "Log interstitial space"
)
tab_model(log_lm_space, log_lm_rich,
pred.labels = pl,
dv.labels = c("Log invertebrate abundance", "Log species richness"))
knitr::opts_chunk$set(echo = TRUE)
# Load libraries
library(here)
library(tidyverse)
library(vegan)
library(reshape)
library(ggplot2)
library(ggpubr)
library(zoo)
library(sjPlot)
library(sjmisc)
library(sjlabelled)
library(psych)
library(knitr)
library(faraway)
library(car)
library(MASS)
library(gridExtra)
library(grid)
#Load data
branch_width <- read.csv(here("photogrammetry_data/branchwidth_data.csv"))
coral_pg <- read.csv(here("photogrammetry_data/galvan_journ_datasheet_v2.csv"))
coral_field <- read.csv(here("photogrammetry_data/field_experiment_colony_measurements_moorea_summer2019.csv"))
cafi_surveys <- read.csv(here("cafi_data/revised_cafi_data_moorea_summer2019_11_27.csv"))
cafi_field <- read.csv(here("cafi_data/prelim_cafi_counts_moorea_summer2019.csv"))
updated_cafi <- read.csv(here("cafi_data/cafi_data_w_taxonomy_summer2019_2020_5_21.csv"))
#Incorporate cleaned CAFI data
updated_cafi2 <- updated_cafi %>% filter(str_detect(coral_id, "^FE")) %>%
dplyr::select(master_sort, coral_id, code, type, search_term, lowest_level, phylum, genus, species, general_notes) %>%
subset(phylum!="Chordata")
#Calculate CAFI richness, abundance, and diversity (shannon weiner) for each coral
cafi_summarized2 <- group_by(updated_cafi2, coral_id) %>%
summarise(num_cafi = n(), cafi_richness = length(unique(code)), cafi_present = paste(sort(unique(code)), collapse = ";"))
cafi_summarized2$sw <- updated_cafi2 %>%
count(code, coral_id = coral_id) %>%
spread(code,n) %>%
mutate_all(list(~tidyr::replace_na(.,0))) %>%
dplyr::select(-coral_id) %>%
diversity(index = "shannon")
### Incorporate coral data
# Clean field data
coral_field2 <- coral_field %>%
dplyr::rename(branch = branch_width)
# Clean photogrammetry morphometric data
coral_pg$volume_pg <- as.numeric(as.character(coral_pg$volume_pg)) # Convert factor to numeric
# Clean photogrammetry branch width data and take averages of branch distance for each coral
branch_width$branch_distance_mm <- as.numeric(as.character(branch_width$branch_distance_mm)) # Convert factor to numeric
branch_w_summarized <- group_by(branch_width, coral_id) %>%
summarise(avg_w_cm = sum(branch_distance_mm/10)/n(), #take average branch distance and convert mm to cm
measurements = length(unique(replicate_measurement)),
locations = paste(sort(unique(location)), collapse = ";"))
#Create dataframe called coral_dim
coral_dim <- merge(coral_pg, branch_w_summarized, by = "coral_id") %>%
merge(coral_field2, by = "coral_id") %>%
mutate(volume_pg=volume_pg*10^6,
max_hull_volume=max_hull_volume*10^6, #convert m^3 to cm^3
max_hull_surface_area=max_hull_surface_area*10^4,
surface_area=surface_area*10^4) %>%   #convert m^2 to cm^2
dplyr::rename(max_hull_SA = max_hull_surface_area,
SA = surface_area)
coral_dim$interstitial_space <- coral_dim$max_hull_volume - coral_dim$volume_pg #calculate available space by subtracting software estimated volume from convex hull volume
coral_dim$SAV <- coral_dim$SA / coral_dim$volume_pg #calculate surface area to volume relationship
coral_dim$convexity <- coral_dim$volume_pg / coral_dim$max_hull_volume #calculate proportion occupied, high ratios indicate less free space between branches
coral_dim$packing <- coral_dim$SA / coral_dim$max_hull_SA #how much of an objects surface area is situated internally
coral_dim$sphericity <- ((3.14^(1/3))*((6*coral_dim$volume_pg)^(2/3)))/coral_dim$SA #calculate sphericity or how close the object is to a sphere
coral_dim <- coral_dim %>%
dplyr::select(coral_id, branch, cafi, size_class, volume_field, volume_pg, SA, avg_w_cm, interstitial_space, SAV, convexity, packing, sphericity) %>%
filter(cafi=="empty")
coral_dim$branch <- ifelse(coral_dim$convexity>=0.5, "tight","wide") #classifies wide and tight branching coral based on convexity measurement
#Create dataframe called cafi_coral and merge coral and cafi data
cafi_coral <- merge(cafi_summarized2, coral_dim, by ="coral_id") %>%
drop_na(interstitial_space) %>%
dplyr::select(coral_id, branch, cafi, size_class, volume_field, volume_pg, SA, avg_w_cm, interstitial_space, SAV, convexity, packing, sphericity, num_cafi, cafi_present, cafi_richness, sw)
#Log transform variables
cafi_coral$log_num_cafi <- log(cafi_coral$num_cafi)
cafi_coral$log_volume_field <- log(cafi_coral$volume_field)
cafi_coral$log_volume_pg <- log(cafi_coral$volume_pg)
cafi_coral$log_avg_w <- log(cafi_coral$avg_w_cm)
cafi_coral$log_interstitial_space <- log(cafi_coral$interstitial_space)
cafi_coral$log_SA <- log(cafi_coral$SA)
cafi_coral$log_cafi_richness <- log(cafi_coral$cafi_richness)
cafi_coral$log_sphericity <- log(cafi_coral$sphericity)
#Sqrt transform variables
cafi_coral$sqrt_num_cafi <- sqrt(cafi_coral$num_cafi)
cafi_coral$sqrt_volume_pg <- sqrt(cafi_coral$volume_pg)
cafi_coral$sqrt_interstitial_space <- sqrt(cafi_coral$interstitial_space)
cafi_coral$sqrt_SA <- sqrt(cafi_coral$SA)
cafi_coral$sqrt_cafi_richness <- sqrt(cafi_coral$cafi_richness)
cafi_coral$sqrt_sphericity <- sqrt(cafi_coral$sphericity)
#Visualize correlations between variables
cor_var <- cafi_coral %>%
dplyr::select(volume_pg,volume_field,SA,avg_w_cm,interstitial_space,sphericity,convexity,packing)
pairs.panels(cor_var,
method="pearson",
hist.col = "#00AFBB",
density=TRUE,
ellipses=TRUE)
#Use log transformed data
cor_var2 <- cafi_coral %>%
dplyr::select(log_volume_pg,log_volume_field,log_SA,log_avg_w,log_interstitial_space,log_sphericity,convexity,packing)
pairs.panels(cor_var2,
method="pearson",
hist.col = "#00AFBB",
density=TRUE,
ellipses=TRUE)
g1 <- ggplot(cafi_coral, aes(x=log_volume_pg, y=log_SA, shape=branch, color=branch, linetype=branch))+
geom_point()+
geom_smooth(method=lm, se=TRUE, aes(fill=branch))+
theme_classic()+
theme(axis.title.x=element_blank(),
legend.position="none")+
labs(y=expression(paste("Log SA cm"^{2})))
g2 <- ggplot(cafi_coral, aes(x=log_volume_pg, y=log_avg_w, shape=branch, color=branch, linetype=branch))+
geom_point()+
geom_smooth(method=lm, se=TRUE, aes(fill=branch))+
theme_classic()+
theme(axis.title.x=element_blank(),
legend.position="none")+
labs(y="Log branch distance cm")
g3 <- ggplot(cafi_coral, aes(x=log_volume_pg, y=log_interstitial_space, shape=branch, color=branch, linetype=branch))+
geom_point()+
geom_smooth(method=lm, se=TRUE, aes(fill=branch))+
theme_classic()+
theme(axis.title.x=element_blank(),
legend.position="none")+
labs(y=expression(paste("Log space cm"^{3})))
g4 <- ggplot(cafi_coral, aes(x=log_volume_pg, y=log_sphericity, shape=branch, color=branch, linetype=branch))+
geom_point()+
geom_smooth(method=lm, se=TRUE, aes(fill=branch))+
theme_classic()+
theme(axis.title.x=element_blank(),
legend.position="none")+
labs(y="Log sphericity")
g5 <- ggplot(cafi_coral, aes(x=log_volume_pg, y=convexity, shape=branch, color=branch, linetype=branch))+
geom_point()+
geom_smooth(method=lm, se=TRUE, aes(fill=branch))+
theme_classic()+
theme(axis.title.x=element_blank(),
legend.position="none")+
labs(y="Convexity", x=expression(paste("Log Vol. cm"^{3})))
g6 <- ggplot(cafi_coral, aes(x=log_volume_pg, y=packing, shape=branch, color=branch, linetype=branch))+
geom_point()+
geom_smooth(method=lm, se=TRUE, aes(fill=branch))+
theme_classic()+
theme(axis.title.x=element_blank(),
legend.position="bottom")+
labs(y="Packing")
#extract legend
#https://github.com/hadley/ggplot2/wiki/Share-a-legend-between-two-ggplot2-graphs
g_legend<-function(a.gplot){
tmp <- ggplot_gtable(ggplot_build(a.gplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
return(legend)}
mylegend<-g_legend(g6)
fig1 <- ggarrange(g1,g2,g3,g4,g5,g6,
ncol = 3, nrow=2)
annotate_figure(fig1,
top = text_grob("Morphological Measurements", color = "black", face = "bold", size = 14),
bottom = text_grob(expression(paste("Log Vol. cm"^{3})), color = "black",
face = "bold", size = 12),
fig.lab = "Figure 1", fig.lab.face = "bold")
pg_field <- ggplot(cafi_coral, aes(x=log_volume_pg, y=log_volume_field)+
geom_point()+
geom_smooth(method=lm, se=TRUE)+
theme_classic()+
labs(y="log elipsoid V.", x="log software volume")
pg_field
pg_field <- ggplot(cafi_coral, aes(x=log_volume_pg, y=log_volume_field))+
geom_point()+
geom_smooth(method=lm, se=TRUE)+
theme_classic()+
labs(y="log elipsoid V.", x="log software volume")
pg_field
pg_field <- ggplot(cafi_coral, aes(x=log_volume_pg, y=log_volume_field))+
geom_point()+
geom_smooth(method=lm, se=TRUE)+
theme_classic()+
labs(y= expression(paste("log elipsoid vol. cm"^{3})), x= expression(paste("log software V. cm"^{3})))
pg_field
pg_field <- ggplot(cafi_coral, aes(x=log_volume_pg, y=log_volume_field))+
geom_point()+
geom_smooth(method=lm, se=TRUE)+
theme_classic()+
labs(y= expression(paste("log elipsoid V cm"^{3})), x= expression(paste("log software V cm"^{3})))
pg_field
pg_field <- ggplot(cafi_coral, aes(x=volume_pg, y=volume_field))+
geom_point()+
geom_smooth(method=lm, se=TRUE)+
theme_classic()+
labs(y= expression(paste("log elipsoid V cm"^{3})), x= expression(paste("log software V cm"^{3})))
pg_field
pg_field <- ggplot(cafi_coral, aes(x=volume_pg, y=volume_field))+
geom_point()+
geom_smooth(method=lm, se=TRUE)+
theme_classic()+
labs(y= expression(paste("elipsoid V cm"^{3})), x= expression(paste("software V cm"^{3})))
pg_field
pg_field <- ggplot(cafi_coral, aes(x=volume_pg, y=volume_field))+
geom_point()+
geom_smooth(method=lm, se=TRUE)+
scale_y_continuous(breaks = c(0, 0.5, 1, 1.5, 2, 2.5, 3))+
theme_bw()+
labs(y= expression(paste("elipsoid V cm"^{3})), x= expression(paste("software V cm"^{3})))
pg_field
pg_field <- ggplot(cafi_coral, aes(x=volume_pg, y=volume_field))+
geom_point()+
geom_smooth(method=lm, se=TRUE)+
scale_y_continuous(breaks=seq(0,max(cafi_coral$volume_field), by = 5000))+
theme_bw()+
labs(y= expression(paste("elipsoid V cm"^{3})), x= expression(paste("software V cm"^{3})))
pg_field
pg_field <- ggplot(cafi_coral, aes(x=volume_pg, y=volume_field))+
geom_point()+
geom_smooth(method=lm, se=TRUE)+
scale_y_continuous(breaks=seq(0,max(cafi_coral$volume_field), by = 5000))+
scale_x_continuous(breaks=seq(0,max(cafi_coral$volume_field), by = 1000))+
theme_bw()+
labs(y= expression(paste("elipsoid V cm"^{3})), x= expression(paste("software V cm"^{3})))
pg_field
pg_field <- ggplot(cafi_coral, aes(x=volume_pg, y=volume_field))+
geom_point()+
geom_smooth(method=lm, se=TRUE)+
scale_y_continuous(breaks=seq(0,max(cafi_coral$volume_field), by = 5000))+
scale_x_continuous(breaks=seq(0,max(cafi_coral$volume_pg), by = 5000))+
theme_bw()+
labs(y= expression(paste("elipsoid V cm"^{3})), x= expression(paste("software V cm"^{3})))
pg_field
pg_field <- ggplot(cafi_coral, aes(x=volume_pg, y=volume_field))+
geom_point()+
geom_smooth(method=lm, se=TRUE)+
scale_y_continuous(breaks=seq(0,max(cafi_coral$volume_field), by = 5000))+
scale_x_continuous(breaks=seq(0,max(cafi_coral$volume_pg), by = 1000))+
theme_bw()+
labs(y= expression(paste("elipsoid V cm"^{3})), x= expression(paste("software V cm"^{3})))
pg_field
pg_field <- ggplot(cafi_coral, aes(x=volume_pg, y=volume_field))+
geom_point()+
geom_smooth(method=lm, se=TRUE)+
scale_y_continuous(breaks=seq(0,max(cafi_coral$volume_field), by = 5000))+
scale_x_continuous(breaks=seq(0,max(cafi_coral$volume_pg), by = 2000))+
theme_bw()+
labs(y= expression(paste("elipsoid V cm"^{3})), x= expression(paste("software V cm"^{3})))
pg_field
pg_field <- ggplot(cafi_coral, aes(x=volume_pg, y=volume_field))+
geom_point()+
geom_smooth(method=lm, se=TRUE)+
scale_y_continuous(breaks=seq(0,max(cafi_coral$volume_field), by = 5000))+
scale_x_continuous(breaks=seq(0,max(cafi_coral$volume_pg), by = 2000))+
theme_bw()+
labs(y= expression(paste("elipsoid V cm"^{3})), x= expression(paste("software V cm"^{3})))
pg_field
invert_pg <- ggplot(cafi_coral, aes(x=volume_pg, y=volume_field))+
geom_point()+
geom_smooth(method=lm, se=TRUE)+
theme_bw()+
labs(y="invert abundance", x= expression(paste("elipsoid V cm"^{3})))
invert_pg
pg_field <- ggplot(cafi_coral, aes(x=volume_pg, y=volume_field))+
geom_point()+
geom_smooth(method=lm, se=TRUE)+
scale_y_continuous(breaks=seq(0,max(cafi_coral$volume_field), by = 5000))+
scale_x_continuous(breaks=seq(0,max(cafi_coral$volume_pg), by = 2000))+
theme_bw()+
labs(y= expression(paste("elipsoid V cm"^{3})), x= expression(paste("software V cm"^{3})))
pg_field
invert_pg <- ggplot(cafi_coral, aes(x=volume_field, y=num_cafi))+
geom_point()+
geom_smooth(method=lm, se=TRUE)+
theme_bw()+
labs(y="invert abundance", x= expression(paste("elipsoid V cm"^{3})))
invert_pg
pg_field <- ggplot(cafi_coral, aes(x=volume_pg, y=volume_field))+
geom_point()+
geom_smooth(method=lm, se=TRUE)+
scale_y_continuous(breaks=seq(0,max(cafi_coral$volume_field), by = 5000))+
scale_x_continuous(breaks=seq(0,max(cafi_coral$volume_pg), by = 2000))+
theme_bw()+
labs(y= expression(paste("elipsoid V cm"^{3})), x= expression(paste("software V cm"^{3})))
pg_field
invert_pg <- ggplot(cafi_coral, aes(x=volume_field, y=num_cafi))+
geom_point()+
geom_smooth(method=lm, se=TRUE)+
theme_bw()+
labs(y="invert abundance", x= expression(paste("elipsoid V cm"^{3})))
invert_pg
invert_field <- ggplot(cafi_coral, aes(x=volume_pg, y=num_cafi))+
geom_point()+
geom_smooth(method=lm, se=TRUE)+
theme_bw()+
labs(y="invert abundance", x= expression(paste("software V cm"^{3})))
invert_field
#HTML table from regression results
pl <- c(
'(Intercept)' = "Intercept",
log_volume_pg = "Log volume"
)
tab_model(log_lm_volume, log_lm_rich,
pred.labels = pl,
dv.labels = c("Log invertebrate abundance", "Species richness"))
#HTML table from regression results
pl <- c(
'(Intercept)' = "Intercept",
volume_field = "elipsoid volume",
volume_pg = "software est. volume"
)
tab_model(invert_field, invert_pg,
pred.labels = pl,
dv.labels = "Invertebrate abundance")
#HTML table from regression results
pl <- c(
'(Intercept)' = "Intercept",
volume_field = "elipsoid volume",
volume_pg = "software est. volume"
)
tab_model(invert_field, invert_pg,
pred.labels = pl,
dv.labels = c("Invertebrate abundance"))
#HTML table from regression results
pl <- c(
'(Intercept)' = "Intercept",
volume_field = "elipsoid volume")
tab_model(invert_field,
pred.labels = pl,
dv.labels = c("Invertebrate abundance"))
#HTML table from regression results
pl <- c(
'(Intercept)' = "Intercept",
volume_field = "elipsoid volume")
tab_model(invert_field,
pred.labels = pl,
dv.labels = "Invertebrate abundance")
pg_field <- ggplot(cafi_coral, aes(x=volume_pg, y=volume_field))+
geom_point()+
geom_smooth(method=lm, se=TRUE)+
scale_y_continuous(breaks=seq(0,max(cafi_coral$volume_field), by = 5000))+
scale_x_continuous(breaks=seq(0,max(cafi_coral$volume_pg), by = 2000))+
theme_bw()+
labs(y= expression(paste("elipsoid V cm"^{3})), x= expression(paste("software V cm"^{3})))
pg_field
invert_field <- ggplot(cafi_coral, aes(x=volume_field, y=num_cafi))+
geom_point()+
geom_smooth(method=lm, se=TRUE)+
theme_bw()+
labs(y="invert abundance", x= expression(paste("elipsoid V cm"^{3})))
invert_field
invert_pg <- ggplot(cafi_coral, aes(x=volume_pg, y=num_cafi))+
geom_point()+
geom_smooth(method=lm, se=TRUE)+
theme_bw()+
labs(y="invert abundance", x= expression(paste("software V cm"^{3})))
invert_pg
#HTML table from regression results
pl <- c(
'(Intercept)' = "Intercept",
volume_field = "elipsoid volume")
tab_model(invert_field,
pred.labels = pl,
dv.labels = "Invertebrate abundance")
#HTML table from regression results
pl <- c(
'(Intercept)' = "Intercept",
log_volume_pg = "Log volume"
)
tab_model(log_lm_volume, log_lm_rich,
pred.labels = pl,
dv.labels = c("Log invertebrate abundance", "Species richness"))
